// Code generated by MockGen. DO NOT EDIT.
// Source: pvz.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/hamillka/avitoTechSpring25/internal/models"
)

// MockPVZService is a mock of PVZService interface.
type MockPVZService struct {
	ctrl     *gomock.Controller
	recorder *MockPVZServiceMockRecorder
}

// MockPVZServiceMockRecorder is the mock recorder for MockPVZService.
type MockPVZServiceMockRecorder struct {
	mock *MockPVZService
}

// NewMockPVZService creates a new mock instance.
func NewMockPVZService(ctrl *gomock.Controller) *MockPVZService {
	mock := &MockPVZService{ctrl: ctrl}
	mock.recorder = &MockPVZServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZService) EXPECT() *MockPVZServiceMockRecorder {
	return m.recorder
}

// CloseLastReception mocks base method.
func (m *MockPVZService) CloseLastReception(pvzId string) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLastReception", pvzId)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseLastReception indicates an expected call of CloseLastReception.
func (mr *MockPVZServiceMockRecorder) CloseLastReception(pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLastReception", reflect.TypeOf((*MockPVZService)(nil).CloseLastReception), pvzId)
}

// CreatePVZ mocks base method.
func (m *MockPVZService) CreatePVZ(city string) (models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", city)
	ret0, _ := ret[0].(models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockPVZServiceMockRecorder) CreatePVZ(city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockPVZService)(nil).CreatePVZ), city)
}

// DeleteLastProduct mocks base method.
func (m *MockPVZService) DeleteLastProduct(pvzId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", pvzId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockPVZServiceMockRecorder) DeleteLastProduct(pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockPVZService)(nil).DeleteLastProduct), pvzId)
}

// GetPVZWithPagination mocks base method.
func (m *MockPVZService) GetPVZWithPagination(startDate, endDate *time.Time, page, limit int) ([]models.PVZWithReceptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZWithPagination", startDate, endDate, page, limit)
	ret0, _ := ret[0].([]models.PVZWithReceptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZWithPagination indicates an expected call of GetPVZWithPagination.
func (mr *MockPVZServiceMockRecorder) GetPVZWithPagination(startDate, endDate, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZWithPagination", reflect.TypeOf((*MockPVZService)(nil).GetPVZWithPagination), startDate, endDate, page, limit)
}
