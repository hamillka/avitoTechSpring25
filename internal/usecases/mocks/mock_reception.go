// Code generated by MockGen. DO NOT EDIT.
// Source: reception.go
//
// Generated by this command:
//
//	mockgen -source=reception.go -destination=./mocks/mock_reception.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "github.com/hamillka/avitoTechSpring25/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockReceptionRepository is a mock of ReceptionRepository interface.
type MockReceptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionRepositoryMockRecorder
	isgomock struct{}
}

// MockReceptionRepositoryMockRecorder is the mock recorder for MockReceptionRepository.
type MockReceptionRepositoryMockRecorder struct {
	mock *MockReceptionRepository
}

// NewMockReceptionRepository creates a new mock instance.
func NewMockReceptionRepository(ctrl *gomock.Controller) *MockReceptionRepository {
	mock := &MockReceptionRepository{ctrl: ctrl}
	mock.recorder = &MockReceptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionRepository) EXPECT() *MockReceptionRepositoryMockRecorder {
	return m.recorder
}

// CreateReception mocks base method.
func (m *MockReceptionRepository) CreateReception(pvzId string) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", pvzId)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockReceptionRepositoryMockRecorder) CreateReception(pvzId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockReceptionRepository)(nil).CreateReception), pvzId)
}

// GetLastReception mocks base method.
func (m *MockReceptionRepository) GetLastReception(pvzId string) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastReception", pvzId)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastReception indicates an expected call of GetLastReception.
func (mr *MockReceptionRepositoryMockRecorder) GetLastReception(pvzId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastReception", reflect.TypeOf((*MockReceptionRepository)(nil).GetLastReception), pvzId)
}

// GetReceptionsByPVZId mocks base method.
func (m *MockReceptionRepository) GetReceptionsByPVZId(pvzId string, startDate, endDate *time.Time) ([]models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceptionsByPVZId", pvzId, startDate, endDate)
	ret0, _ := ret[0].([]models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceptionsByPVZId indicates an expected call of GetReceptionsByPVZId.
func (mr *MockReceptionRepositoryMockRecorder) GetReceptionsByPVZId(pvzId, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceptionsByPVZId", reflect.TypeOf((*MockReceptionRepository)(nil).GetReceptionsByPVZId), pvzId, startDate, endDate)
}

// UpdateReceptionStatus mocks base method.
func (m *MockReceptionRepository) UpdateReceptionStatus(recId, status string) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReceptionStatus", recId, status)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReceptionStatus indicates an expected call of UpdateReceptionStatus.
func (mr *MockReceptionRepositoryMockRecorder) UpdateReceptionStatus(recId, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReceptionStatus", reflect.TypeOf((*MockReceptionRepository)(nil).UpdateReceptionStatus), recId, status)
}
