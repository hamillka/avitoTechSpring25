// Code generated by MockGen. DO NOT EDIT.
// Source: pvz.go
//
// Generated by this command:
//
//	mockgen -source=pvz.go -destination=./mocks/mock_pvz.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/hamillka/avitoTechSpring25/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockPVZRepository is a mock of PVZRepository interface.
type MockPVZRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPVZRepositoryMockRecorder
	isgomock struct{}
}

// MockPVZRepositoryMockRecorder is the mock recorder for MockPVZRepository.
type MockPVZRepositoryMockRecorder struct {
	mock *MockPVZRepository
}

// NewMockPVZRepository creates a new mock instance.
func NewMockPVZRepository(ctrl *gomock.Controller) *MockPVZRepository {
	mock := &MockPVZRepository{ctrl: ctrl}
	mock.recorder = &MockPVZRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZRepository) EXPECT() *MockPVZRepositoryMockRecorder {
	return m.recorder
}

// CreatePVZ mocks base method.
func (m *MockPVZRepository) CreatePVZ(city string) (models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", city)
	ret0, _ := ret[0].(models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockPVZRepositoryMockRecorder) CreatePVZ(city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockPVZRepository)(nil).CreatePVZ), city)
}

// GetAllPVZs mocks base method.
func (m *MockPVZRepository) GetAllPVZs(ctx context.Context) ([]models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPVZs", ctx)
	ret0, _ := ret[0].([]models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPVZs indicates an expected call of GetAllPVZs.
func (mr *MockPVZRepositoryMockRecorder) GetAllPVZs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPVZs", reflect.TypeOf((*MockPVZRepository)(nil).GetAllPVZs), ctx)
}

// GetPVZById mocks base method.
func (m *MockPVZRepository) GetPVZById(pvzId string) (models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZById", pvzId)
	ret0, _ := ret[0].(models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZById indicates an expected call of GetPVZById.
func (mr *MockPVZRepositoryMockRecorder) GetPVZById(pvzId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZById", reflect.TypeOf((*MockPVZRepository)(nil).GetPVZById), pvzId)
}

// GetPVZsWithPagination mocks base method.
func (m *MockPVZRepository) GetPVZsWithPagination(offset, limit int) ([]models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZsWithPagination", offset, limit)
	ret0, _ := ret[0].([]models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZsWithPagination indicates an expected call of GetPVZsWithPagination.
func (mr *MockPVZRepositoryMockRecorder) GetPVZsWithPagination(offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZsWithPagination", reflect.TypeOf((*MockPVZRepository)(nil).GetPVZsWithPagination), offset, limit)
}
